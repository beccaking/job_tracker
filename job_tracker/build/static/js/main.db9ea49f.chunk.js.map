{"version":3,"sources":["components/Listings.js","components/Applied.js","components/Interview.js","components/TryAgain.js","components/Form.js","components/CreateForm.js","components/AppliedForm.js","components/InterviewForm.js","components/AppliedDate.js","App.js","serviceWorker.js","index.js"],"names":["Listings","props","state","company","position","positionURL","notes","newJobs","this","jobs","filter","job","status","className","length","map","key","id","listingDate","href","readOnly","value","onClick","handleView","handleDelete","React","Component","Applied","appliedJobs","applyDate","Interview","handleStatus","data","setState","interviewDate","tryAgainDate","Date","handleUpdate","interviewJobs","TryAgain","rejectedJobs","Form","handleChange","event","target","handleSubmit","preventDefault","view","handleCreate","formInputs","onSubmit","htmlFor","type","onChange","rows","cols","argument","console","log","baseUrl","App","fetchJobs","fetch","then","json","jData","catch","err","createData","body","JSON","stringify","method","headers","createdJobs","jsonedJobs","updateData","updatedPost","toLocaleDateString","CreateForm","AppliedDate","AppliedForm","InterviewForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db9ea49f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Listings extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: ''\n    }\n  }\n\n\n  render(){\n    let newJobs = this.props.jobs.filter(job => job.status === 'new');\n\n    return(\n      <div className='column-listings'>\n        <h3>Listing ({newJobs.length})</h3>\n        <div className='box'>\n        {\n          newJobs.map((job) => (\n            <div key={job.id} className='job'>\n              <h4>Date created: {job.listingDate}</h4>\n              <h4>Company: {job.company}</h4>\n                <h4>Position: <a href={job.positionURL}>{job.position}</a></h4>\n              <h4>Notes:</h4>\n              <textarea readOnly value={job.notes} /><br/>\n              <button onClick={()=>{this.props.handleView('form', job)}}>Edit</button>\n              <button onClick={()=>{this.props.handleDelete(job.id)}}>Delete</button>\n              <button onClick={()=>{this.props.handleView('appliedDate', job)}}>Applied</button>\n            </div>\n          ))\n        }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Listings;\n","import React from 'react';\n\nclass Applied extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: ''\n    }\n  }\n\n\n  render(){\n    let appliedJobs = this.props.jobs.filter(job => job.status === 'applied');\n\n    return(\n      <div className='column-applied'>\n        <h3>Applied ({appliedJobs.length})</h3>\n        <div className='box'>\n        {\n          appliedJobs.map((job) => (\n            <div key={job.id} className='job'>\n              <h4>Date created: {job.listingDate}</h4>\n              <h4>Date applied: {job.applyDate}</h4>\n              <h4>Company: {job.company}</h4>\n              <h4>Position: <a href={job.positionURL}>{job.position}</a></h4>\n\n              <h4>Notes:</h4>\n              <textarea readOnly value={job.notes} /><br/>\n              <button onClick={()=>{this.props.handleView('applied', job)}}>Edit</button>\n              <button onClick={()=>{this.props.handleDelete(job.id)}}>Delete</button>\n              <button onClick={()=>{this.props.handleView('interviewDate', job)}}>Interview</button>\n            </div>\n          ))\n        }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Applied;\n","import React from 'react';\n\nclass Interview extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: ''\n    }\n  }\n\n\n  handleStatus = (data) => {\n    this.setState({\n      company: data.company,\n      position: data.position,\n      positionURL: data.positionURL,\n      notes: data.notes,\n      applyDate: data.applyDate,\n      interviewDate: data.interviewDate,\n      tryAgainDate: new Date(),\n      // tryAgainDate: new Date(new Date().setDate(new Date().getDate()-6)),\n      status: \"rejected\",\n      id: data.id\n    }, () => {\n      this.props.handleUpdate(this.state);\n    })\n\n\n  }\n\n\n  render(){\n    let interviewJobs = this.props.jobs.filter(job => job.status === 'interview');\n\n    return(\n      <div className='column-applied'>\n        <h3>Interview ({interviewJobs.length})</h3>\n        <div className='box'>\n        {\n          interviewJobs.map((job) => (\n            <div key={job.id} className='job'>\n              <h4>Date created: {job.listingDate}</h4>\n              <h4>Date applied: {job.applyDate}</h4>\n              <h4>Date interview: {job.interviewDate}</h4>\n              <h4>Company: {job.company}</h4>\n              <h4>Position: <a href={job.positionURL}>{job.position}</a></h4>\n              <h4>Notes:</h4>\n              <textarea readOnly value={job.notes} /><br/>\n              <button onClick={()=>{this.props.handleView('interview', job)}}>Edit</button>\n              <button onClick={()=>{this.props.handleDelete(job.id)}}>Delete</button>\n              <button onClick={()=>{this.handleStatus(job)}}>Rejected</button>\n            </div>\n          ))\n        }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Interview;\n","import React from 'react';\n\nclass TryAgain extends React.Component{\n  render(){\n    let rejectedJobs = this.props.jobs.filter(job => job.status === 'rejected');\n\n    return(\n      <div className='column-applied'>\n        <h3>Try Again ({rejectedJobs.length})</h3>\n        <div className='box'>\n        {\n          rejectedJobs.map((job) => (\n            <div key={job.id} className='job'>\n              <h4>Date created: {job.listingDate}</h4>\n              <h4>Date applied: {job.applyDate}</h4>\n              <h4>Date interview: {job.interviewDate}</h4>\n              <h4>Date rejected: {job.tryAgainDate}</h4>\n              <h4>Company: {job.company}</h4>\n              <h4>Position: <a href={job.positionURL}>{job.position}</a></h4>\n              <h4>Notes:</h4>\n              <textarea readOnly value={job.notes} /><br/>\n\n              <button onClick={()=>{this.props.handleDelete(job.id)}}>Delete</button>\n\n            </div>\n          ))\n        }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TryAgain;\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: '',\n      status: \"new\"\n    }\n  }\n\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    if(this.props.view === 'list') {\n      this.props.handleCreate(this.state)\n    } else if(this.props.view === 'form') {\n      this.props.handleUpdate(this.state)\n    }\n  }\n\n\n\n  componentDidMount(){\n    // console.log(\"componentDidMount is running\");\n    this.setState({\n      company: this.props.formInputs.company,\n      position: this.props.formInputs.position,\n      positionURL: this.props.formInputs.positionURL,\n      notes: this.props.formInputs.notes,\n      id: this.props.formInputs.id\n    })\n  }\n\n\n  render(){\n    return(\n        <div className='editform'>\n          <h2>Edit Job Listing</h2>\n          \n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor='company'>Company</label>\n            <input type='text' value={this.state.company} id='company' onChange={this.handleChange}/>\n            <label htmlFor='position'>Position</label>\n            <input type='text' value={this.state.position} id='position' onChange={this.handleChange}/>\n            <label htmlFor='positionURL'>URL</label>\n            <input type='text' value={this.state.positionURL} id='positionURL' onChange={this.handleChange}/>\n            <label htmlFor='notes'>Notes</label>\n            <input type='text' value={this.state.notes} id='notes' onChange={this.handleChange}/>\n            <input type='submit' value=\"Edit\"/>\n            <button onClick={()=>{this.props.handleView('list')}}>Cancel</button>\n          </form>\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: '',\n      listingDate: new Date()\n      // listingDate: new Date(new Date().setDate(new Date().getDate()-10))\n    }\n  }\n\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.handleCreate(this.state);\n    this.setState({\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: ''\n    })\n  }\n\n\n  render(){\n    return(\n        <div className='createform'>\n          <h2>Add a New Job Listing</h2>\n\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor='company'>Company</label>\n            <input type='text' value={this.state.company} id='company' onChange={this.handleChange}/>\n            <label htmlFor='position'>Position</label>\n            <input type='text' value={this.state.position} id='position' onChange={this.handleChange}/>\n            <label htmlFor='positionURL'>URL</label>\n            <input type='text' value={this.state.positionURL} id='positionURL' onChange={this.handleChange}/>\n            <label htmlFor='notes'>Notes</label>\n            <input type='text' value={this.state.notes} id='notes' onChange={this.handleChange}/>\n            <input className='addbutton' type='submit' value=\"Add\"/>\n          </form>\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: '',\n      status: \"applied\"\n    }\n  }\n\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.handleUpdate(this.state)\n  }\n\n\n\n  componentDidMount(){\n    // console.log(\"componentDidMount is running\");\n    this.setState({\n      company: this.props.formInputs.company,\n      position: this.props.formInputs.position,\n      positionURL: this.props.formInputs.positionURL,\n      notes: this.props.formInputs.notes,\n      id: this.props.formInputs.id\n    })\n  }\n\n\n  render(){\n    return(\n        <div className='editform'>\n          <h2>Applied Job Listing</h2>\n          <h4>Company: {this.props.formInputs.company}</h4>\n          <h4>Position: {this.props.formInputs.position}</h4>\n          <h4>Notes:</h4>\n\n          <form onSubmit={this.handleSubmit}>\n            <textarea rows=\"4\" cols=\"50\" value={this.state.notes} id='notes' onChange={this.handleChange}></textarea>\n            <input type='submit' value=\"Edit\"/>\n            <button onClick={()=>{this.props.handleView('list')}}>Cancel</button>\n          </form>\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      company: '',\n      position: '',\n      positionURL: '',\n      notes: '',\n      status: \"interview\"\n    }\n  }\n\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.handleUpdate(this.state)\n  }\n\n\n\n  componentDidMount(){\n    // console.log(\"componentDidMount is running\");\n    this.setState({\n      company: this.props.formInputs.company,\n      position: this.props.formInputs.position,\n      positionURL: this.props.formInputs.positionURL,\n      notes: this.props.formInputs.notes,\n      id: this.props.formInputs.id\n    })\n  }\n\n\n  render(){\n    return(\n        <div className='editform'>\n          <h2>Interview Job Listing</h2>\n          <h4>Company: {this.props.formInputs.company}</h4>\n          <h4>Position: {this.props.formInputs.position}</h4>\n          <h4>Notes:</h4>\n\n          <form onSubmit={this.handleSubmit}>\n            <textarea rows=\"4\" cols=\"50\" value={this.state.notes} id='notes' onChange={this.handleChange}></textarea>\n            <input type='submit' value=\"Edit\"/>\n            <button onClick={()=>{this.props.handleView('list')}}>Cancel</button>\n          </form>\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      company: \"\",\n      position: \"\",\n      positionURL: \"\",\n      notes: \"\",\n      applyDate: \"\",\n      interviewDate: \"\",\n      id: \"\"\n    }\n  }\n\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value});\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    const argument = {...this.state, status: (this.props.view===\"appliedDate\")? \"applied\":\"interview\"}\n    this.props.handleUpdate(argument)\n  }\n\n\n\n  componentDidMount(){\n    console.log(\"componentDidMount is running\");\n    this.setState({\n      company: this.props.formInputs.company,\n      position: this.props.formInputs.position,\n      positionURL: this.props.formInputs.positionURL,\n      notes: this.props.formInputs.notes,\n      applyDate: this.props.formInputs.applyDate,\n      interviewDate: this.props.formInputs.interviewDate,\n      id: this.props.formInputs.id\n    })\n    console.log(this.props.formInputs);\n  }\n\n\n  render(){\n    return(\n        <div className='modal'>\n          {(this.props.view===\"appliedDate\")?\n           <h2>Applied Date</h2>\n           :<h2>Interview Date</h2>}\n\n          <h4>Company: {this.props.formInputs.company}</h4>\n          <h4>Position: {this.props.formInputs.position}</h4>\n\n          <form onSubmit={this.handleSubmit}>\n              {(this.props.view===\"appliedDate\")?\n                <input type='date' value={this.state.applyDate} id='applyDate' onChange={this.handleChange}/>\n                :\n                <input type='date' value={this.state.interviewDate} id='interviewDate' onChange={this.handleChange}/>\n               }\n               <input type='submit' value=\"Submit\"/>\n          </form>\n\n\n\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react';\nimport Listings from './components/Listings.js'\nimport Applied from './components/Applied.js'\nimport Interview from './components/Interview.js'\nimport TryAgain from './components/TryAgain.js'\nimport Form from './components/Form.js'\nimport CreateForm from './components/CreateForm.js'\nimport AppliedForm from './components/AppliedForm.js'\nimport InterviewForm from './components/InterviewForm.js'\nimport AppliedDate from './components/AppliedDate.js'\n\n\n// Set URL for database\nlet baseUrl = 'http://job-tracker-phpreact.herokuapp.com/api';\n// if (process.env.NODE_ENV === 'development') {\n//   baseUrl = 'http://localhost:8888'\n// } else {\n//   baseUrl = \"https://job-tracker-phpreact.herokuapp.com/api\"\n// }\n\n// let baseUrl = 'http://localhost:8888';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      view: 'list',\n      jobs: [],\n      formInputs: {\n        company: '',\n        position: '',\n        positionURL: '',\n        notes: ''\n      }\n    }\n  }\n\n  fetchJobs = () => {\n    // console.log('get all jobs')\n    fetch(`${baseUrl}/listings`)\n    .then(data=>data.json())\n    .then(jData=> {\n      this.setState({jobs:jData})\n    }).catch(err=>console.log(err))\n\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleCreate = (createData) => {\n    fetch(`${baseUrl}/listings`, {\n      body: JSON.stringify(createData),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(createdJobs => {\n        return createdJobs.json()\n      }).then(jsonedJobs => {\n        this.setState({jobs: jsonedJobs})\n      }).catch(err => console.log(err))\n  }\n\n\n  handleUpdate = (updateData) => {\n    fetch(`${baseUrl}/listings/${updateData.id}`, {\n      body: JSON.stringify(updateData),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(updatedPost => {\n        this.handleView('list')\n        this.fetchJobs()\n      }).catch(err => console.log(err))\n  }\n\n\n  handleDelete = (id) => {\n    fetch(`${baseUrl}/listings/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(json => {\n        this.setState({\n          jobs: this.state.jobs.filter(job => job.id !== id)\n        })\n      }).catch(err => console.log(err))\n  }\n\n\n  handleView = (view, data)=>{\n\n    let formInputs = {\n      company:'',\n      position:'',\n      positionURL:'',\n      notes:'',\n      id: null\n    }\n\n    switch(view){\n      case 'list':\n\n      break\n      case 'form':\n      case 'applied':\n      case 'interview':\n      case 'appliedDate':\n      case 'interviewDate':\n      formInputs = {\n        company: data.company,\n        position: data.position,\n        positionURL: data.positionURL,\n        notes: data.notes,\n        applyDate: data.applyDate,\n        interviewDate: data.interviewDate,\n        id: data.id\n      }\n      break\n      default:\n      break\n    }\n\n    this.setState({\n      view: view,\n      formInputs: formInputs\n    }, () => {\n      console.log(this.state);\n    })\n  }\n\n\n\n\n  // Run fetchListings only once after page loads\n  componentDidMount(){\n    this.fetchJobs()\n  }\n\n\n  render(){\n    console.log(baseUrl)\n    return(\n      <div className='container'>\n        <header>\n          <h1>Job Tracker</h1>\n          <h2>Today's Date: {new Date().toLocaleDateString(\"en-US\")}</h2>\n        </header>\n\n        <div className='addForm'>\n\n          {\n            (this.state.view === 'list')\n            ?\n            <CreateForm handleCreate={this.handleCreate} handleView={this.handleView} formInputs={this.state.formInputs} view={this.state.view}/>\n            : null\n          }\n\n          {\n            (this.state.view === 'form')\n            ?\n            <Form handleUpdate={this.handleUpdate} handleView={this.handleView} formInputs={this.state.formInputs} view={this.state.view}/>\n            : null\n          }\n\n          {\n            (this.state.view === 'appliedDate'||this.state.view ==='interviewDate')\n            ?\n            <AppliedDate handleUpdate={this.handleUpdate} handleView={this.handleView} formInputs={this.state.formInputs} view={this.state.view}/>\n            : null\n          }\n\n          {\n            (this.state.view === 'applied')\n            ?\n            <AppliedForm handleUpdate={this.handleUpdate} handleView={this.handleView} formInputs={this.state.formInputs} view={this.state.view}/>\n            : null\n          }\n\n          {\n            (this.state.view === 'interview')\n            ?\n            <InterviewForm handleUpdate={this.handleUpdate} handleView={this.handleView} formInputs={this.state.formInputs} view={this.state.view}/>\n            : null\n          }\n\n        </div>\n\n        <div className='box-container'>\n            <Listings handleUpdate={this.handleUpdate} handleDelete={this.handleDelete} handleView={this.handleView} jobs={this.state.jobs} formInputs={this.state.formInputs}/>\n            <Applied handleUpdate={this.handleUpdate} handleDelete={this.handleDelete} handleView={this.handleView} jobs={this.state.jobs}/>\n            <Interview handleUpdate={this.handleUpdate} handleDelete={this.handleDelete} handleView={this.handleView} jobs={this.state.jobs}/>\n            <TryAgain handleDelete={this.handleDelete} jobs={this.state.jobs}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}