{"version":3,"sources":["components/Listings.js","components/Applied.js","components/Interview.js","components/TryAgain.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["console","log","Listings","job","this","props","handleView","className","jobs","length","map","key","id","listingDate","company","href","positionURL","position","notes","onClick","showForm","handleDelete","React","Component","Applied","Interview","TryAgain","Form","handleChange","event","setState","target","value","handleSubmit","preventDefault","handleUpdate","state","url","info","formInputs","onSubmit","htmlFor","type","onChange","baseUrl","App","fetchJobs","fetch","then","data","json","jData","catch","err","handleCreate","createdData","updatedData","method","headers","filter","view","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NAOEA,QAAQC,IAAI,sB,IA8FCC,E,iLA7BJC,GACPC,KAAKC,MAAMC,WAAW,OAAQH,K,+BAEvB,IAAD,OACN,OACE,yBAAKI,UAAU,mBACb,wCAAcH,KAAKC,MAAMG,KAAKC,OAA9B,KACA,yBAAKF,UAAU,OAEbH,KAAKC,MAAMG,KAAKE,KAAI,SAACP,GAAD,OAClB,yBAAKQ,IAAKR,EAAIS,GAAIL,UAAU,OAC1B,6CAAmBJ,EAAIU,aACvB,wCAAcV,EAAIW,SAClB,uBAAGC,KAAMZ,EAAIa,aAAb,aAAqCb,EAAIc,UACzC,sCACA,2BAAId,EAAIe,OACR,4BAAQC,QAAS,WAAK,EAAKC,SAASjB,KAApC,QACA,4BAAQgB,QAAS,WAAK,EAAKd,MAAMgB,aAAalB,EAAIS,MAAlD,UACA,qD,GA/ESU,IAAMC,WCYdC,E,iLAnBX,OACE,yBAAKjB,UAAU,kBACb,2CACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,qCACA,uCACA,wCACA,yCACA,wCACA,0CACA,yD,GAbUe,IAAMC,WCoBbE,E,iLAlBX,OACE,yBAAKlB,UAAU,oBACb,6CACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,oCACA,uCACA,wCACA,yCACA,wCACA,iD,GAZYe,IAAMC,WCoBfG,E,iLAlBX,OACE,yBAAKnB,UAAU,mBACb,6CACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,oCACA,uCACA,wCACA,yCACA,wCACA,iD,GAZWe,IAAMC,WC6CdI,E,YA5Cb,aAAc,IAAD,8BACX,+CAQFC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAgBD,EAAME,OAAOnB,GAAKiB,EAAME,OAAOC,SAVpC,EAYbC,aAAe,SAACJ,GACdA,EAAMK,iBACN,EAAK7B,MAAM8B,aAAa,EAAKC,QAZ7B,EAAKA,MAAQ,CACXtB,QAAS,GACTG,SAAU,GACVoB,IAAK,GACLC,KAAM,IANG,E,iFAiBXlC,KAAK0B,SAAS,CACZhB,QAASV,KAAKC,MAAMkC,WAAWzB,QAC/BG,SAAUb,KAAKC,MAAMkC,WAAWtB,SAChCoB,IAAKjC,KAAKC,MAAMkC,WAAWF,IAC3BC,KAAMlC,KAAKC,MAAMkC,WAAWD,S,+BAGvB,IAAD,OACN,OACI,yBAAK/B,UAAU,YACb,0BAAMiC,SAAUpC,KAAK6B,cACnB,2BAAOQ,QAAQ,WAAf,WACA,2BAAOC,KAAK,OAAOV,MAAO5B,KAAKgC,MAAMtB,QAASF,GAAG,UAAU+B,SAAUvC,KAAKwB,eAC1E,2BAAOa,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOV,MAAO5B,KAAKgC,MAAMnB,SAAUL,GAAG,WAAW+B,SAAUvC,KAAKwB,eAC5E,2BAAOa,QAAQ,OAAf,OACA,2BAAOC,KAAK,OAAOV,MAAO5B,KAAKgC,MAAMC,IAAKzB,GAAG,MAAM+B,SAAUvC,KAAKwB,eAClE,2BAAOa,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOV,MAAO5B,KAAKgC,MAAME,KAAM1B,GAAG,OAAO+B,SAAUvC,KAAKwB,eACpE,2BAAOc,KAAK,YAEd,4BAAQvB,QAAS,WAAK,EAAKd,MAAMC,WAAW,UAA5C,e,GAvCSgB,IAAMC,WCMrBqB,EAAU,GAIZ5C,QAAQC,IAAI,sB,IA4HC4C,E,YAxHb,WAAYxC,GAAO,IAAD,8BAChB,4CAAMA,KAaRyC,UAAY,WAEVC,MAAM,GAAD,OAAIH,EAAJ,cACJI,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAG,GACJ,EAAKrB,SAAS,CAACtB,KAAK2C,OACnBC,OAAM,SAAAC,GAAG,OAAErD,QAAQC,IAAIoD,OApBV,EAwBlBzB,aAAe,SAACC,GACd,EAAKC,SAAL,eAAgBD,EAAME,OAAOnB,GAAKiB,EAAME,OAAOC,SAzB/B,EA4BlBsB,aAAe,SAACC,GACdvD,QAAQC,IAAI,wBAAyBsD,IA7BrB,EAgClBpB,aAAe,SAACqB,GACdxD,QAAQC,IAAI,uBAAwBuD,GACpC,EAAKlD,WAAW,SAlCA,EAqClBe,aAAe,SAACT,GACdmC,MAAM,GAAD,OAAIH,EAAJ,qBAAwBhC,GAAM,CACjC6C,OAAQ,SACRC,QAAS,CACP,OAAU,oCACV,eAAgB,sBAEjBV,MAAK,SAAAE,GACJ,EAAKpB,SAAS,CACZtB,KAAM,EAAK4B,MAAM5B,KAAKmD,QAAO,SAAAxD,GAAG,OAAIA,EAAIS,KAAOA,UAEhDwC,OAAM,SAAAC,GAAG,OAAIrD,QAAQC,IAAIoD,OAhDd,EAmDlB/C,WAAa,SAACsD,EAAMX,GAClB,IAAIV,EAAa,CACfzB,QAAQ,GACRG,SAAS,GACToB,IAAI,GACJC,KAAK,IAGP,OAAOsB,GACL,IAAK,OACL,MACA,IAAK,OACLrB,EAAa,CACXzB,QAASmC,EAAKnC,QACdG,SAAUgC,EAAKhC,SACfoB,IAAKY,EAAKZ,IACVC,KAAMW,EAAKX,MAMf,EAAKR,SAAS,CACZ8B,KAAMA,EACNrB,WAAYA,KAzEd,EAAKH,MAAQ,CACXwB,KAAM,OACNpD,KAAM,GACN+B,WAAY,CACVzB,QAAS,GACTG,SAAU,GACVoB,IAAK,GACLC,KAAM,KATM,E,iFAiFhBlC,KAAK0C,c,+BAIL,OACE,yBAAKvC,UAAU,aACb,gCACE,2CACA,uDAGF,yBAAKA,UAAU,WACf,2BAAOkC,QAAQ,QAAf,yBACE,0BAAM7B,GAAG,OAAO4B,SAAUpC,KAAKkD,cAC7B,2BAAOZ,KAAK,OAAOmB,YAAY,UAAUlB,SAAUvC,KAAKwB,eACxD,2BAAOc,KAAK,OAAOmB,YAAY,WAAWlB,SAAUvC,KAAKwB,eACzD,2BAAOc,KAAK,OAAOmB,YAAY,MAAMlB,SAAUvC,KAAKwB,eACpD,2BAAOc,KAAK,OAAOmB,YAAY,YAAYlB,SAAUvC,KAAKwB,eAC1D,2BAAOc,KAAK,YAEd,8BAGF,yBAAKnC,UAAU,iBAEQ,SAApBH,KAAKgC,MAAMwB,KACV,kBAAC,EAAD,CAAMzB,aAAc/B,KAAK+B,aAAc7B,WAAYF,KAAKE,WAAYiC,WAAYnC,KAAKgC,MAAMG,aAC3F,KAEA,kBAAC,EAAD,CAAUlB,aAAcjB,KAAKiB,aAAcf,WAAYF,KAAKE,WAAYE,KAAMJ,KAAKgC,MAAM5B,KAAM+B,WAAYnC,KAAKgC,MAAMG,aACtH,kBAAC,EAAD,CAAS/B,KAAMJ,KAAKgC,MAAM5B,OAC1B,kBAAC,EAAD,CAAWA,KAAMJ,KAAKgC,MAAM5B,OAC5B,kBAAC,EAAD,CAAUA,KAAMJ,KAAKgC,MAAM5B,a,GAlHrBc,IAAMC,WCHJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.e218190e.chunk.js","sourcesContent":["import React from 'react';\n\n// Set URL for database\nlet baseUrl = '';\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://localhost:8888'\n} else {\n  console.log('this is for heroku');\n}\n\n\nclass Listings extends React.Component{\n\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       listings: []\n//     }\n//   }\n\n\n  // fetchListings = () => {\n  //   console.log(baseUrl);\n  //   fetch(`${baseUrl}/listings`)\n  //   .then(data=>data.json())\n  //   .then(jData=> {\n  //     this.setState({listings:jData})\n  //   }).catch(err=>console.log(err))\n  // }\n\n\n  // handleDelete = (id) => {\n  //   fetch(`${baseUrl}/listings/${id}`, {\n  //     method: 'DELETE',\n  //     headers: {\n  //       'Accept': 'application/json, text/plain, */*',\n  //       'Content-Type': 'application/json'\n  //     }\n  //   }).then(json => {\n  //       this.setState({\n  //         listings: this.state.listings.filter(listing => listing.id !== id)\n  //       })\n  //     }).catch(err => console.log(err))\n  // }\n\n\n  // // Run fetchListings only once after page loads\n  // componentDidMount(){\n  //   this.fetchListings()\n  // }\n\n\n  // render(){\n  //   return(\n  //     <div className='column-listings'>\n  //       <h3>Listing ({this.state.listings.length})</h3>\n  //       <div className='box'>\n  //         {this.state.listings.map(listing => {\n  //           return(\n  //             <div key={listing.id} className='job'>\n  //               <h4>Date created: {listing.listingDate}</h4>\n  //               <h4>Company: {listing.company}</h4>\n  //               <a href={listing.positionURL}>Position: {listing.position}</a>\n  //               <h4>Notes:</h4>\n  //               <p>{listing.notes}</p>\n  //               <button>Edit</button>\n  //               <button onClick={()=>{this.handleDelete(listing.id)}}>Delete</button>\n  //               <button>Applied</button>\n  //             </div>\n  //           )\n  //         })}\n\n  showForm(job){\n    this.props.handleView('form', job)\n  }\n  render(){\n    return(\n      <div className='column-listings'>\n        <h3>Listing ({this.props.jobs.length})</h3>\n        <div className='box'>\n        {\n          this.props.jobs.map((job) => (\n            <div key={job.id} className='job'>\n              <h4>Date created: {job.listingDate}</h4>\n              <h4>Company: {job.company}</h4>\n              <a href={job.positionURL}>Position: {job.position}</a>\n              <h4>Notes:</h4>\n              <p>{job.notes}</p>\n              <button onClick={()=>{this.showForm(job)}}>Edit</button>\n              <button onClick={()=>{this.props.handleDelete(job.id)}}>Delete</button>\n              <button>Applied</button>\n            </div>\n          ))\n        }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Listings;\n","import React from 'react';\n\nclass Applied extends React.Component{\n  render(){\n    return(\n      <div className='column-applied'>\n        <h3>Applied (0)</h3>\n        <div className='box'>\n          <div className='job'>\n            <h4>Date:</h4>\n            <h4>Company</h4>\n            <h4>Position</h4>\n            <h4>More Info</h4>\n            <button>Edit</button>\n            <button>Delete</button>\n            <button>Have Interview</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Applied;\n","import React from 'react';\n\nclass Interview extends React.Component{\n  render(){\n    return(\n      <div className='column-interview'>\n        <h3>Interview (0)</h3>\n        <div className='box'>\n          <div className='job'>\n            <h4>Date</h4>\n            <h4>Company</h4>\n            <h4>Position</h4>\n            <h4>More Info</h4>\n            <button>Edit</button>\n            <button>Delete</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Interview;\n","import React from 'react';\n\nclass TryAgain extends React.Component{\n  render(){\n    return(\n      <div className='column-tryagain'>\n        <h3>Try Again (0)</h3>\n        <div className='box'>\n          <div className='job'>\n            <h4>Date</h4>\n            <h4>Company</h4>\n            <h4>Position</h4>\n            <h4>More Info</h4>\n            <button>Edit</button>\n            <button>Delete</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TryAgain;\n","import React from 'react'\n\nclass Form extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      company: '',\n      position: '',\n      url: '',\n      info: ''\n    }\n  }\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.handleUpdate(this.state)\n  }\n  componentDidMount(){\n    this.setState({\n      company: this.props.formInputs.company,\n      position: this.props.formInputs.position,\n      url: this.props.formInputs.url,\n      info: this.props.formInputs.info\n    })\n  }\n  render(){\n    return(\n        <div className='editform'>\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor='company'>Company</label>\n            <input type='text' value={this.state.company} id='company' onChange={this.handleChange}/>\n            <label htmlFor='position'>Position</label>\n            <input type='text' value={this.state.position} id='position' onChange={this.handleChange}/>\n            <label htmlFor='url'>URL</label>\n            <input type='text' value={this.state.url} id='url' onChange={this.handleChange}/>\n            <label htmlFor='info'>Info</label>\n            <input type='text' value={this.state.info} id='info' onChange={this.handleChange}/>\n            <input type='submit'/>\n          </form>\n          <button onClick={()=>{this.props.handleView('list')}}>Cancel</button>\n        </div>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react';\nimport Listings from './components/Listings.js'\nimport Applied from './components/Applied.js'\nimport Interview from './components/Interview.js'\nimport TryAgain from './components/TryAgain.js'\nimport Form from './components/Form.js'\n\n// Set URL for database\nlet baseUrl = '';\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://localhost:8888'\n} else {\n  console.log('this is for heroku');\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      view: 'list',\n      jobs: [],\n      formInputs: {\n        company: '',\n        position: '',\n        url: '',\n        info: ''\n      }\n    }\n  }\n\n  fetchJobs = () => {\n    // console.log('get all jobs')\n    fetch(`${baseUrl}/listings`)\n    .then(data=>data.json())\n    .then(jData=> {\n      this.setState({jobs:jData})\n    }).catch(err=>console.log(err))\n\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleCreate = (createdData) => {\n    console.log('data for post request', createdData)\n  }\n\n  handleUpdate = (updatedData) => {\n    console.log('data for put request', updatedData)\n    this.handleView('list')\n  }\n\n  handleDelete = (id) => {\n    fetch(`${baseUrl}/listings/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(json => {\n        this.setState({\n          jobs: this.state.jobs.filter(job => job.id !== id)\n        })\n      }).catch(err => console.log(err))\n  }\n\n  handleView = (view, data)=>{\n    let formInputs = {\n      company:'',\n      position:'',\n      url:'',\n      info:''\n    }\n\n    switch(view){\n      case 'list':\n      break\n      case 'form':\n      formInputs = {\n        company: data.company,\n        position: data.position,\n        url: data.url,\n        info: data.info\n      }\n      break\n      default:\n      break\n    }\n    this.setState({\n      view: view,\n      formInputs: formInputs\n    })\n  }\n\n  // Run fetchListings only once after page loads\n  componentDidMount(){\n    this.fetchJobs()\n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <header>\n          <h1>Job Tracker</h1>\n          <h2>Today's Date: 12-13-19</h2>\n        </header>\n\n        <div className='addForm'>\n        <label htmlFor='form'>Add a New Job Listing</label>\n          <form id='form' onSubmit={this.handleCreate}>\n            <input type='text' placeholder='Company' onChange={this.handleChange}/>\n            <input type='text' placeholder='Position' onChange={this.handleChange}/>\n            <input type='text' placeholder='URL' onChange={this.handleChange}/>\n            <input type='text' placeholder='More Info' onChange={this.handleChange}/>\n            <input type='submit'/>\n          </form>\n          <br/>\n        </div>\n\n        <div className='box-container'>\n        {\n          (this.state.view === 'form')\n          ? <Form handleUpdate={this.handleUpdate} handleView={this.handleView} formInputs={this.state.formInputs}/>\n          : null\n        }\n            <Listings handleDelete={this.handleDelete} handleView={this.handleView} jobs={this.state.jobs} formInputs={this.state.formInputs}/>\n            <Applied jobs={this.state.jobs}/>\n            <Interview jobs={this.state.jobs}/>\n            <TryAgain jobs={this.state.jobs}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}